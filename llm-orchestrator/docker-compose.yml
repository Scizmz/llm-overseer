# docker-compose.yml

services:
  # Core Backend Services
  orchestrator:
    build: 
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: llm-orchestrator-main
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/llm_orchestrator
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your-secret-key-here
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./frameworks:/app/frameworks:ro
      - ./services/orchestrator:/app
      - /app/node_modules
    networks:
      - llm-network

  model-gateway:
    build: 
      context: ./services/model-gateway
      dockerfile: Dockerfile
    container_name: llm-model-gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - ORCHESTRATOR_URL=http://orchestrator:3000
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
    depends_on:
      - redis
      - orchestrator
    volumes:
      - ./services/model-gateway:/app
      - /app/node_modules
    networks:
      - llm-network

  state-manager:
    build: 
      context: ./services/state-manager
      dockerfile: Dockerfile
    container_name: llm-state-manager
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/llm_orchestrator
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/state-manager:/app
      - /app/node_modules
    networks:
      - llm-network

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: llm-postgres
    environment:
      - POSTGRES_DB=llm_orchestrator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - llm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: llm-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - llm-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: llm-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - llm-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Web Server (for API access)
  nginx:
    image: nginx:alpine
    container_name: llm-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - orchestrator
      - model-gateway
      - state-manager
    networks:
      - llm-network

networks:
  llm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
